This is my implementation of Memory (https://en.wikipedia.org/wiki/Concentration_(card_game)) in Python. To run the game, run python kp_fellowship_submission.py in the terminal. I wrote it with Python 3.7, using the curses, itertools, random, time, math, and io modules. All of these modules should be built-in, except perhaps curses. I would have preferred to use Numpy instead of math and random, but I didn't want to build unnecessary external dependancies. I used curses because it seems to be the standard for running interactive console programs in Python.

This game was relatively simple to implement. The only nontrivial datastructures I used were a dictionary and a set, which are Python abstractions of hash tables. I used sets to determine if a clicked location corresponded to something I wanted to be clickable and if a clicked card was already flipped up. I did this because the set (hash table) has constant time lookup, so I can determine if something is clickable or if a card is flipped up in a way that doesn't cost more time with more cards on the table. And I used a dictionary (hash map) to keep track of where each card was, using location as the key and the card as the value. Other than that, everything was pretty straightforward.

Ascii encoding has direct images of playing cards, but I didn't use those because they're too small and it's hard to see what's actually on the card. Instead, I just display the suit and the rank, and color the displayed text based off the color of the suit. Using the Ascii encoding of the suits is directly supported in Python 3.7 so that's not an issue. Since I am directly displaying the rank of the card, the 10 card has one more character than the others, so I added a space to all the other cards so they have the same size. I made the back of the card be three yellow stars against a blue background because I thought that looked cool. And I marked the current player with yellow text on a blue background because it matched the back of the card, which I thought might better indicate that that person is supposed to go next. 

To change the number of players, set N_PLAYERS in the Python file to the desired number of players. To change the difficulty of the game, shorten the length of the RANKS list so there are fewer options.